//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: GSDFPacketDcps.h
//  Source: gencxx/GSDFPacketDcps.idl
//  Generated: Tue Nov 28 13:14:39 2017
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _GSDFPACKETDCPS_H_
#define _GSDFPACKETDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "GSDFPacket.h"


namespace opensplice_dds_broker
{

   class GSDFPacketTypeSupportInterface;

   typedef GSDFPacketTypeSupportInterface * GSDFPacketTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < GSDFPacketTypeSupportInterface> GSDFPacketTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < GSDFPacketTypeSupportInterface> GSDFPacketTypeSupportInterface_out;


   class GSDFPacketDataWriter;

   typedef GSDFPacketDataWriter * GSDFPacketDataWriter_ptr;
   typedef DDS_DCPSInterface_var < GSDFPacketDataWriter> GSDFPacketDataWriter_var;
   typedef DDS_DCPSInterface_out < GSDFPacketDataWriter> GSDFPacketDataWriter_out;


   class GSDFPacketDataReader;

   typedef GSDFPacketDataReader * GSDFPacketDataReader_ptr;
   typedef DDS_DCPSInterface_var < GSDFPacketDataReader> GSDFPacketDataReader_var;
   typedef DDS_DCPSInterface_out < GSDFPacketDataReader> GSDFPacketDataReader_out;


   class GSDFPacketDataReaderView;

   typedef GSDFPacketDataReaderView * GSDFPacketDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < GSDFPacketDataReaderView> GSDFPacketDataReaderView_var;
   typedef DDS_DCPSInterface_out < GSDFPacketDataReaderView> GSDFPacketDataReaderView_out;

   struct GSDFPacketSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < GSDFPacket, struct GSDFPacketSeq_uniq_> GSDFPacketSeq;
   typedef DDS_DCPSSequence_var < GSDFPacketSeq> GSDFPacketSeq_var;
   typedef DDS_DCPSSequence_out < GSDFPacketSeq> GSDFPacketSeq_out;
   class GSDFPacketTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef GSDFPacketTypeSupportInterface_ptr _ptr_type;
      typedef GSDFPacketTypeSupportInterface_var _var_type;

      static GSDFPacketTypeSupportInterface_ptr _duplicate (GSDFPacketTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static GSDFPacketTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static GSDFPacketTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static GSDFPacketTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      GSDFPacketTypeSupportInterface_ptr _this () { return this; }


   protected:
      GSDFPacketTypeSupportInterface () {};
      ~GSDFPacketTypeSupportInterface () {};
   private:
      GSDFPacketTypeSupportInterface (const GSDFPacketTypeSupportInterface &);
      GSDFPacketTypeSupportInterface & operator = (const GSDFPacketTypeSupportInterface &);
   };

   class GSDFPacketDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef GSDFPacketDataWriter_ptr _ptr_type;
      typedef GSDFPacketDataWriter_var _var_type;

      static GSDFPacketDataWriter_ptr _duplicate (GSDFPacketDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static GSDFPacketDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static GSDFPacketDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static GSDFPacketDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      GSDFPacketDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const GSDFPacket& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const GSDFPacket& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const GSDFPacket& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const GSDFPacket& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const GSDFPacket& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const GSDFPacket& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const GSDFPacket& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const GSDFPacket& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const GSDFPacket& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const GSDFPacket& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (GSDFPacket& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const GSDFPacket& instance_data) = 0;

   protected:
      GSDFPacketDataWriter () {};
      ~GSDFPacketDataWriter () {};
   private:
      GSDFPacketDataWriter (const GSDFPacketDataWriter &);
      GSDFPacketDataWriter & operator = (const GSDFPacketDataWriter &);
   };

   class GSDFPacketDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef GSDFPacketDataReader_ptr _ptr_type;
      typedef GSDFPacketDataReader_var _var_type;

      static GSDFPacketDataReader_ptr _duplicate (GSDFPacketDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static GSDFPacketDataReader_ptr _narrow (DDS::Object_ptr obj);
      static GSDFPacketDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static GSDFPacketDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      GSDFPacketDataReader_ptr _this () { return this; }

      virtual DDS::Long read (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (GSDFPacket& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (GSDFPacket& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (GSDFPacket& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const GSDFPacket& instance) = 0;

   protected:
      GSDFPacketDataReader () {};
      ~GSDFPacketDataReader () {};
   private:
      GSDFPacketDataReader (const GSDFPacketDataReader &);
      GSDFPacketDataReader & operator = (const GSDFPacketDataReader &);
   };

   class GSDFPacketDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef GSDFPacketDataReaderView_ptr _ptr_type;
      typedef GSDFPacketDataReaderView_var _var_type;

      static GSDFPacketDataReaderView_ptr _duplicate (GSDFPacketDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static GSDFPacketDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static GSDFPacketDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static GSDFPacketDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      GSDFPacketDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (GSDFPacket& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (GSDFPacket& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (GSDFPacketSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (GSDFPacket& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const GSDFPacket& instance) = 0;

   protected:
      GSDFPacketDataReaderView () {};
      ~GSDFPacketDataReaderView () {};
   private:
      GSDFPacketDataReaderView (const GSDFPacketDataReaderView &);
      GSDFPacketDataReaderView & operator = (const GSDFPacketDataReaderView &);
   };

}




#endif 
